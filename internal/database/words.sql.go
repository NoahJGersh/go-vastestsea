// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: words.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFormattedWord = `-- name: CreateFormattedWord :one
INSERT INTO words (id, created_at, updated_at, word, font_formatted, language_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, word, font_formatted, language_id
`

type CreateFormattedWordParams struct {
	Word          string
	FontFormatted sql.NullString
	LanguageID    uuid.UUID
}

func (q *Queries) CreateFormattedWord(ctx context.Context, arg CreateFormattedWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createFormattedWord, arg.Word, arg.FontFormatted, arg.LanguageID)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
		&i.FontFormatted,
		&i.LanguageID,
	)
	return i, err
}

const createWord = `-- name: CreateWord :one
INSERT INTO words (id, created_at, updated_at, word, language_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, word, font_formatted, language_id
`

type CreateWordParams struct {
	Word       string
	LanguageID uuid.UUID
}

func (q *Queries) CreateWord(ctx context.Context, arg CreateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, createWord, arg.Word, arg.LanguageID)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
		&i.FontFormatted,
		&i.LanguageID,
	)
	return i, err
}

const deleteWord = `-- name: DeleteWord :exec
DELETE FROM words
WHERE id = $1
`

func (q *Queries) DeleteWord(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWord, id)
	return err
}

const getWord = `-- name: GetWord :many
SELECT id, created_at, updated_at, word, font_formatted, language_id FROM words
WHERE LOWER(word) = $1
`

func (q *Queries) GetWord(ctx context.Context, word string) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWord, word)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Word,
			&i.FontFormatted,
			&i.LanguageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordByID = `-- name: GetWordByID :one
SELECT id, created_at, updated_at, word, font_formatted, language_id FROM words
WHERE id = $1
`

func (q *Queries) GetWordByID(ctx context.Context, id uuid.UUID) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordByID, id)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
		&i.FontFormatted,
		&i.LanguageID,
	)
	return i, err
}

const getWordFromLanguage = `-- name: GetWordFromLanguage :one
SELECT id, created_at, updated_at, word, font_formatted, language_id FROM words
WHERE LOWER(word) = $1 AND language_id = $2
`

type GetWordFromLanguageParams struct {
	Word       string
	LanguageID uuid.UUID
}

func (q *Queries) GetWordFromLanguage(ctx context.Context, arg GetWordFromLanguageParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, getWordFromLanguage, arg.Word, arg.LanguageID)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
		&i.FontFormatted,
		&i.LanguageID,
	)
	return i, err
}

const getWords = `-- name: GetWords :many
SELECT id, created_at, updated_at, word, font_formatted, language_id FROM words
`

func (q *Queries) GetWords(ctx context.Context) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Word,
			&i.FontFormatted,
			&i.LanguageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWordsByLanguageID = `-- name: GetWordsByLanguageID :many
SELECT id, created_at, updated_at, word, font_formatted, language_id FROM words
WHERE language_id = $1
`

func (q *Queries) GetWordsByLanguageID(ctx context.Context, languageID uuid.UUID) ([]Word, error) {
	rows, err := q.db.QueryContext(ctx, getWordsByLanguageID, languageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Word
	for rows.Next() {
		var i Word
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Word,
			&i.FontFormatted,
			&i.LanguageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWord = `-- name: UpdateWord :one
UPDATE words
SET 
    word = CASE WHEN $1::bool
        THEN $2::text
        ELSE word
        END,
    font_formatted = CASE WHEN $3::bool
        THEN $4::text
        ELSE font_formatted
        END
WHERE id = $5
RETURNING id, created_at, updated_at, word, font_formatted, language_id
`

type UpdateWordParams struct {
	SetWord      bool
	Word         string
	SetFormatted bool
	Formatted    string
	ID           uuid.UUID
}

func (q *Queries) UpdateWord(ctx context.Context, arg UpdateWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, updateWord,
		arg.SetWord,
		arg.Word,
		arg.SetFormatted,
		arg.Formatted,
		arg.ID,
	)
	var i Word
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Word,
		&i.FontFormatted,
		&i.LanguageID,
	)
	return i, err
}

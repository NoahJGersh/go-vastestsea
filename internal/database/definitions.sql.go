// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: definitions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createDefinition = `-- name: CreateDefinition :one
INSERT INTO definitions (id, created_at, updated_at, content, part_of_speech, word_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, content, part_of_speech, word_id
`

type CreateDefinitionParams struct {
	Content      string
	PartOfSpeech string
	WordID       uuid.UUID
}

func (q *Queries) CreateDefinition(ctx context.Context, arg CreateDefinitionParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, createDefinition, arg.Content, arg.PartOfSpeech, arg.WordID)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const deleteDefinition = `-- name: DeleteDefinition :exec
DELETE FROM definitions
WHERE id = $1
`

func (q *Queries) DeleteDefinition(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDefinition, id)
	return err
}

const getDefinitionByID = `-- name: GetDefinitionByID :one
SELECT id, created_at, updated_at, content, part_of_speech, word_id FROM definitions
WHERE id = $1
`

func (q *Queries) GetDefinitionByID(ctx context.Context, id uuid.UUID) (Definition, error) {
	row := q.db.QueryRowContext(ctx, getDefinitionByID, id)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const getDefinitionsOfWord = `-- name: GetDefinitionsOfWord :many
SELECT id, created_at, updated_at, content, part_of_speech, word_id FROM definitions
WHERE definitions.word_id = $1
ORDER BY part_of_speech ASC, content ASC
`

func (q *Queries) GetDefinitionsOfWord(ctx context.Context, wordID uuid.UUID) ([]Definition, error) {
	rows, err := q.db.QueryContext(ctx, getDefinitionsOfWord, wordID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Definition
	for rows.Next() {
		var i Definition
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Content,
			&i.PartOfSpeech,
			&i.WordID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDefinition = `-- name: UpdateDefinition :one
UPDATE definitions
SET content = $1, part_of_speech = $2
WHERE id = $3
RETURNING id, created_at, updated_at, content, part_of_speech, word_id
`

type UpdateDefinitionParams struct {
	Content      string
	PartOfSpeech string
	ID           uuid.UUID
}

func (q *Queries) UpdateDefinition(ctx context.Context, arg UpdateDefinitionParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, updateDefinition, arg.Content, arg.PartOfSpeech, arg.ID)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const updateDefinitionContent = `-- name: UpdateDefinitionContent :one
UPDATE definitions
SET content = $1
WHERE id = $2
RETURNING id, created_at, updated_at, content, part_of_speech, word_id
`

type UpdateDefinitionContentParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateDefinitionContent(ctx context.Context, arg UpdateDefinitionContentParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, updateDefinitionContent, arg.Content, arg.ID)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

const updateDefinitionPartOfSpeech = `-- name: UpdateDefinitionPartOfSpeech :one
UPDATE definitions
SET part_of_speech = $1
WHERE id = $2
RETURNING id, created_at, updated_at, content, part_of_speech, word_id
`

type UpdateDefinitionPartOfSpeechParams struct {
	PartOfSpeech string
	ID           uuid.UUID
}

func (q *Queries) UpdateDefinitionPartOfSpeech(ctx context.Context, arg UpdateDefinitionPartOfSpeechParams) (Definition, error) {
	row := q.db.QueryRowContext(ctx, updateDefinitionPartOfSpeech, arg.PartOfSpeech, arg.ID)
	var i Definition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Content,
		&i.PartOfSpeech,
		&i.WordID,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: languages.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createLanguage = `-- name: CreateLanguage :one
INSERT INTO languages (id, created_at, updated_at, name)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1
)
RETURNING id, created_at, updated_at, name
`

func (q *Queries) CreateLanguage(ctx context.Context, name string) (Language, error) {
	row := q.db.QueryRowContext(ctx, createLanguage, name)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteLanguage = `-- name: DeleteLanguage :exec
DELETE FROM languages
WHERE id = $1
`

func (q *Queries) DeleteLanguage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLanguage, id)
	return err
}

const getLanguage = `-- name: GetLanguage :one
SELECT id, created_at, updated_at, name FROM languages
WHERE LOWER(name) = $1
`

func (q *Queries) GetLanguage(ctx context.Context, name string) (Language, error) {
	row := q.db.QueryRowContext(ctx, getLanguage, name)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getLanguageByID = `-- name: GetLanguageByID :one
SELECT id, created_at, updated_at, name FROM languages
WHERE id = $1
`

func (q *Queries) GetLanguageByID(ctx context.Context, id uuid.UUID) (Language, error) {
	row := q.db.QueryRowContext(ctx, getLanguageByID, id)
	var i Language
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getLanguages = `-- name: GetLanguages :many
SELECT id, created_at, updated_at, name FROM languages
`

func (q *Queries) GetLanguages(ctx context.Context) ([]Language, error) {
	rows, err := q.db.QueryContext(ctx, getLanguages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Language
	for rows.Next() {
		var i Language
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
